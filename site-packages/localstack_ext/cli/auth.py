_A='LOCALSTACK_AUTH_TOKEN'
import os,click
from click import ClickException
from localstack.utils.analytics.cli import publish_invocation
@click.group(name='auth',short_help='(Beta) Authenticate with your LocalStack account')
def auth():0
@auth.command(name='set-token',short_help='Set your Localstack auth token to allow you to start LocalStack Pro')
@click.argument('auth-token',type=str,required=True)
@publish_invocation
def set_token(auth_token):
	from localstack_ext.bootstrap.licensingv2 import AuthToken as D;A=D(auth_token)
	if not A.is_syntax_valid():raise ClickException('The format of the token you provided is invalid, please make sure to set a valid token. Auth tokens start with `ls-` and are followed by a 36-character sting. You can find your auth token in the LocalStack web app https://app.localstack.cloud.')
	if not A.is_checksum_valid():raise ClickException('The token you provided appears to be invalid, please make sure to set a valid token. You can find your auth token in the LocalStack web app https://app.localstack.cloud.')
	from localstack_ext import config as E;from localstack_ext.bootstrap.auth import get_auth_cache as F
	try:B=F();B[_A]=A.encoded();B.save()
	except Exception as C:raise ClickException(f"Could not save auth configuration into {E.AUTH_CACHE_PATH}: {C}")from C
	click.echo('Token configured successfully')
@auth.command(name='show-token',short_help='Show the auth token in your configuration')
@click.option('--plain',is_flag=True,required=False,default=False,help='Whether to show the full token value in plain text')
@publish_invocation
def show_token(plain):
	H='Token not configured in environment yet, please run localstack auth set-token <AUTH_TOKEN>, or set the environment variable LOCALSTACK_AUTH_TOKEN to a valid auth token. You can find your auth token in the LocalStack web app https://app.localstack.cloud.';from localstack_ext import config as A;from localstack_ext.bootstrap.auth import get_auth_cache as I;from localstack_ext.bootstrap.licensingv2 import ENV_LOCALSTACK_AUTH_TOKEN as B,AuthToken as C
	def D(_token):
		A=_token;B=A.is_valid();click.echo(f"Valid: {B}")
		if plain or not B:click.echo(f"Token: {A.token}")
		else:click.echo(f"Token: {A}")
	E=os.getenv(B,'').strip()
	if E:click.echo(f"Prioritizing auth token set in environment variable {B}");D(C(E));return
	if not os.path.isfile(A.AUTH_CACHE_PATH):click.echo(H);return
	try:J=I()
	except Exception as F:raise ClickException(f"Could not load auth configuration from {A.AUTH_CACHE_PATH}: {F}")from F
	G=J.get(_A,'')
	if not G:click.echo(H)
	D(C(G))