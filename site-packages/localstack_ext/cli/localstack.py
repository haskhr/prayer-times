_B='[red]Error:[/red] '
_A=True
import functools,logging,os,sys
from typing import Any,Callable,Optional
import click
from localstack import config
from localstack.cli import LocalstackCli,LocalstackCliPlugin,console
from localstack.utils.analytics.cli import publish_invocation
from localstack_ext.bootstrap.licensing import is_logged_in
from.auth import auth
from.aws import aws
from.cloud_pods import get_pods_community_commands,pod
from.extensions import extensions
from.iam import iam
from.license import license
from.state import state
class ProLoggedInCliPlugin(LocalstackCliPlugin):
	name='pro'
	def should_load(A):return is_logged_in()
	def attach(B,cli):A=cli.group;A.add_command(cmd_logout);A.add_command(daemons);A.add_command(dns);A.add_command(aws);A.add_command(extensions);A.add_command(pod)
class ExtCliPlugin(LocalstackCliPlugin):
	name='ext-all'
	def attach(B,cli):
		A=cli.group;A.add_command(cmd_login);A.add_command(license);A.add_command(state);A.add_command(auth)
		if not is_logged_in():A.add_command(get_pods_community_commands())
@click.command(name='login',short_help='Login to the LocalStack Platform')
@click.option('-u','--username',help='Username for login',metavar='USER')
@click.option('-p','--password',help='Password for login',metavar='PWD')
@click.option('-s','--password-stdin',help='Read password from stdin',is_flag=_A,default=False)
@publish_invocation
def cmd_login(username,password,password_stdin):
	B=username;A=password;from localstack_ext.bootstrap import auth
	if password_stdin:A=sys.stdin.read().strip()
	if A and not B:raise click.ClickException('Missing username')
	try:auth.login(B,A);console.print('successfully logged in')
	except Exception as C:raise click.ClickException(f"Authentication Error: {C}")
@click.command(name='logout',short_help='Log out from the LocalStack Platform')
@publish_invocation
def cmd_logout():from localstack_ext.bootstrap import auth;auth.logout();console.print('successfully logged out')
def _handle_deprecated_daemons(func):
	@functools.wraps(func)
	def A(*A,**B):
		click.utils.echo(click.style('DeprecationWarning: The LocalStack local daemons are planned to be removed in the future, please let us know if you are actively using them.',fg='red'),err=_A)
		try:return func(*A,**B)
		except ImportError:
			if config.DEBUG:console.print_exception()
			raise click.ClickException('It appears you have a light install of localstack which does not support the local daemon processes.\nIf you would like to use local daemon processes, please reinstall localstack with Python using `pip install localstack[runtime]` instead.')
	return A
@click.group(name='daemons',short_help='Manage local daemon processes',deprecated=_A)
def daemons():0
@daemons.command(name='start',short_help='Start local daemon processes',deprecated=_A)
@publish_invocation
@_handle_deprecated_daemons
def cmd_daemons_start():from localstack_ext.bootstrap import local_daemon as A;console.print('Starting local daemons processes ...');B=A.start_in_background();B.join()
@daemons.command(name='stop',short_help='Stop local daemon processes',deprecated=_A)
@publish_invocation
@_handle_deprecated_daemons
def cmd_daemons_stop():from localstack_ext.bootstrap import local_daemon as A;console.print('Stopping local daemons processes ...');A.kill_servers()
@daemons.command(name='log',short_help='Show log of daemon process',deprecated=_A)
@publish_invocation
@_handle_deprecated_daemons
def cmd_daemons_log():
	from localstack_ext.bootstrap import local_daemon as B;A=B.get_log_file_path()
	if not os.path.isfile(A):console.print('no log found')
	else:
		with open(A,'r')as C:
			for D in C:sys.stdout.write(D);sys.stdout.flush()
@click.group(name='dns',short_help='Manage LocalStack DNS host config')
def dns():0
@dns.command(name='systemd-resolved',short_help='Manage LocalStack DNS in systemd-resolved')
@click.option('--set/--revert','-s/-r','set_',default=_A,help='Set or revert DNS settings')
@publish_invocation
def cmd_dns_systemd(set_):import localstack_ext.bootstrap.dns_utils;from localstack_ext.bootstrap.dns_utils import configure_systemd as A;console.print('Configuring systemd-resolved...');B=localstack_ext.bootstrap.dns_utils.LOG.name;localstack_ext.bootstrap.dns_utils.LOG=ConsoleLogger(B);A(not set_)
class ConsoleLogger(logging.Logger):
	def __init__(A,name):super(ConsoleLogger,A).__init__(name)
	def info(B,msg,*A,**C):console.print(msg%A)
	def warning(B,msg,*A,**C):console.print('[red]Warning:[/red] ',msg%A)
	def error(B,msg,*A,**C):console.print(_B,msg%A)
	def exception(B,msg,*A,**C):console.print(_B,msg%A);console.print_exception()